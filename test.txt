var _ = require('lodash')
, express = require('express')
, bodyParser = require('body-parser')
, shortId = require('shortid')
, cookieParser = require('cookie-parser')
, session  = require('express-session')
, config = require('./config')
, fixtures = require('./fixtures')
, passport = require('./auth')
, conn = require('./db')
, User = conn.model('User')
, Tweet = conn.model('Tweet')
, ObjectId = require('mongoose').Types.ObjectId
, ensureAuthentication = require('./middleware/ensureAuthentication')
, app = express()

app.use(bodyParser.json())
app.use(cookieParser())

app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true
}))

app.use(passport.initialize())
app.use(passport.session())

// Here come routes definitions.

require('./middleware')(app)
require('./router')(app)


app.get('/api/tweets', function(req, res) {
  if (!req.query.userId) {
    return res.sendStatus(400)
  }

  var Tweet = conn.model('Tweet')
    , query = { userId: req.query.userId }
    , options = { sort: { created: -1 } }

  Tweet.find(query, null, options, function(err, tweets) {
    if (err) {
      return res.sendStatus(500)
    }
    var responseTweets = tweets.map(function(tweet) { return tweet.toClient() })
    res.send({ tweets: responseTweets })
  })
})

app.get('/api/users/:userId', function(req, res) {
  var User = conn.model('User')

  User.findOne({ id: req.params.userId }, function(err, user) {
    if (err) {
      return res.sendStatus(500)
    }
    if (!user) {
      return res.sendStatus(404)
    }
    res.send({ user: user })
  })
})

app.get('/api/tweets/:tweetId', function(req, res) {
  var Tweet = conn.model('Tweet')

  Tweet.findById(req.params.tweetId, function(err, tweet) {
    if (err) {
      return res.sendStatus(500)
    }
    if (!tweet) {
      return res.sendStatus(404)
    }
    res.send({ tweet: tweet.toClient() })
  })
})

app.post('/api/auth/login', function(req, res) {
  passport.authenticate('local', function(err, user, info) {
    if (err) {
      return res.sendStatus(500)
    }
    if (!user) {
      return res.sendStatus(403)
    }
    req.login(user, function(err) {
      if (err) {
        return res.sendStatus(500)
      }
      return res.send({ user: user })
    })
  })(req, res)
})

// load middleware at route level
app.delete('/api/tweets/:tweetId', ensureAuthentication, function(req, res) {
    var tweetId = req.params.tweetId

  if (!ObjectId.isValid(tweetId)) {
    return res.sendStatus(400)
  }

  Tweet.findById(tweetId, function(err, tweet) {
    if (err) {
      return res.sendStatus(500)
    }

    if (!tweet) {
      return res.sendStatus(404)
    }

    if (tweet.userId !== req.user.id) {
      return res.sendStatus(403)
    }

    Tweet.findByIdAndRemove(tweet._id, function(err) {
      if (err) {
        return res.sendStatus(500)
      }
      res.sendStatus(200)
    })
  })

})

app.post('/api/tweets', ensureAuthentication, function(req, res) {
  var Tweet = conn.model('Tweet')
    , tweetData = req.body.tweet

  tweetData.created = Date.now() / 1000 | 0
  tweetData.userId = req.user.id

  Tweet.create(tweetData, function(err, tweet) {
    if (err) {
      return res.sendStatus(500)
    }
    res.send({ tweet: tweet.toClient() })
  })
})

app.post('/api/users', function(req, res){
	var user = req.body.user;

	User.create(user, function(err, user){
		if(err){
			if (err.code === 11000) {
				res.sendStatus(409);
			}
			else {
				res.sendStatus(500);
			}
		}
		else{
			req.logIn(user, function(err){
				if(err){
					res.status(500).end();
				}
				else {
					res.status(200).send({user: user}).end();
				}
			});
		}
	});
});


app.post('/api/auth/logout', function(req, res) {
  req.logout()
  res.sendStatus(200)
})

app.put('/api/users/:userId', ensureAuthentication, function(req, res) {
  var User = conn.model('User')
    , query = { id: req.params.userId }
    , update = { password: req.body.password }

  if (req.user.id !== req.params.userId) {
    return res.sendStatus(403)
  }

  User.findOneAndUpdate(query, update, function(err, user) {
    if (err) {
      return res.sendStatus(500)
    }
    res.sendStatus(200)
  })
})

var server = app.listen(config.get('server:port'), config.get('server:host'))

module.exports = server